// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider ="postgresql"
    url      = env("DATABASE_URL")
}

model Neighbourhood {
    id  String  @id @default(cuid())
    name        String
    description String?
    sims        Sim[]
    pets        Pet[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Sim {
    id  String  @id @default(cuid())
    firstName     String
    lastName      String
    gender        String
    race          String
    orientation   String?
    lifestage     String
    aspiration    String?
    secondAspiration    String?
    maritalStatus String?
    career        String?
    zodiac        String?
    hobby         String?
    subHobby      String?
    lifetimeWish  String?
    isDead        Boolean @default(false)
    deathReason   String?
    notes         String?
    pets          Pet[]
    parents       Sim[] @relation("Children")
    children      Sim[] @relation("Children")
    partnerId     String?  @unique
    partner       Sim?  @relation("Partner", fields: [partnerId], references: [id])
    spouse        Sim?  @relation("Partner")
    turnOn        String?
    secondTurnOn  String?
    turnOff       String?
    eyeColour     String
    hairColour    String
    neighbourhood Neighbourhood @relation(fields: [neighbourhoodId], references: [id])
    neighbourhoodId String


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String    

    @@index([lastName])
}

model Pet {
    id  String  @id @default(cuid())
    name      String
    gender    String
    career    String?
    species   String
    isDead        Boolean @default(false)
    owner     Sim?  @relation(fields: [ownerId], references: [id])
    ownerId   String?
    neighbourhood Neighbourhood @relation(fields: [neighbourhoodId], references: [id])
    neighbourhoodId String
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    neighbourhood Neighbourhood[]
    sims          Sim[]
    pets          Pet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
